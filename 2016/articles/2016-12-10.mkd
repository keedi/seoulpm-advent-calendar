Title:    OpenSSH::Parallel
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   newbcode

저자
-----
@newbcode 사랑스런 딸바보 도치파파 리눅스의 모든것 공동저자


시작하며
---------

많은 개발자들이 각자의 개발머신과 실 서비스를 하는 머신들을 관리하고 있을 텐데요?
개발머신은 한대지만 실 서비스를 하는 머신이 100대 이상만 되더라도 아니 10대 이상만 되더라도 배포를 한다던지 원격 커맨드를 실행 한다던지 할때
좀더 빠르게 안될까? 로그를 쉽게 남길수 없을까? 라는 고민을 한번씩 할거 같습니다.
이럴때 펄의 OpenSSH::Parallel 모둘로 빠른 배포와 쉬운 로그를 남기는 효율적인 방법이 있습니다!


준비물
-------

필요한 모듈은 다음과 같습니다.

- [CPAN의 Getopt::Long::Descriptive 모듈][cpan-getopt-long-descriptive]
- [CPAN의 Net::OpenSSH::Paralle 모듈][cpan-net-openssh-parallel]

직접 [CPAN][cpan]을 이용해서 설치한다면 다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ sudo cpan \
        Getopt::Long::Descriptive \
        Net::OpenSSH::Parallel

사용자 계정으로 모듈을 설치하는 방법을 정확하게 알고 있거나
[perlbrew][home-perlbrew]를 이용해서 자신만의 Perl을 사용하고 있다면
다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ cpan \
        Getopt::Long::Descriptive \
        Net::OpenSSH::Parallel


리모트 커맨드 환경설정
----------

ssh로 원격 커맨드를 사용하기 위해서는 아래와 같은 설정이 서버에 셋팅되어야 합니다.
마스터서버(원격 커맨드를 날리는 머신)에서 private 키를 생성 하고 원격지 서버에 public 키를 복사 하면 준비작업은 끝입니다.
(public 키 내용을 ~/.ssh/authorized_keys 에 복사해 넣으면 됩니다)


명령어 옵션
-----------------

스크립트 파일을 실행했을시 옵션을 값을 설정할 수 있게하는 모듈입니다.

    use Getopt::Long::Descriptive;
    # command option
    my ($opt, $usage) = describe_options(
            'topgun %o <some-arg>',
            [ 'srvlist|f=s', "server list file (ex: / 서버리스트를 받는 부분 입니다.)” ],
            [ 'srcfile|s=s', "source path (배포할 파일 경로와 파일 이름을 받는 부분입니다.)” ],
            [ 'dstfile|d=s', "destination path (파일을 배포할 경로 입니다.)” ],
            [],
            [ 'maxcon|m=s', "ssh maxconnections(ssh 동시 커넥션 갯수를 설정 부분 입니다.)”, { default => 40 } ],
            [ 'cmd|c=s', "remote command (ex: \”실제 명령어가 들어가는 부분입니다.“)” ],
            [ 'help',       "usage (https://github.daumkakao.com/perl-kang/topgun)" ],
            );

    print($usage->text), exit if $opt->help;


    병렬 SSH 객체 생성
    # server list default path
    my $srvlist = $opt->srvlist;
    my $path = '/hanmail/hansys';
    my $srvfile = "$path/"."$srvlist";

    # error code
    my @errors=(OSSH_ON_ERROR_IGNORE,OSSH_ON_ERROR_RETRY,OSSH_ON_ERROR_DONE,
            OSSH_ON_ERROR_ABORT,OSSH_ON_ERROR_ABORT_ALL,OSSH_JOIN_FAILED,
            OSSH_ABORTED,OSSH_GOTO_FAILED);

    #option value
    my $max_con = $opt->maxcon;  #최대 SSH커넥션 입니다.
    my $max_recon = 2;  # 재접속 횟수 입니다.
    my $max_workers = 20; # 최대 워커의 수 입니다.

    # ssh option set ( 병렬 SSH 객체를 생성합니다.)
    my $pssh = Net::OpenSSH::Parallel->new(
            workers => $max_workers,
            connections => $max_con,
            reconnections => $max_recon,
        );



파일 배포
---------------

실제 파일 배포가 일어나는 부분 입니다.

    # copy to servers
    if ( defined $opt->srvlist && defined $opt->srcfile && defined $opt->srcfile) {
        my $host = $opt->srvlist;
        if ( -e $opt->srvlist ) {
            my $sfile = $opt->srcfile;
            my $dfile = $opt->dstfile;
            my $mode = 'de_list';
            my $dep_pssh = deploy_task($host, $sfile, $dfile,);
            $dep_pssh->run or die "RUN FAILED\n";
        }
        else {
            warn_print("Not Found $host");
        }
    }

배포함수
----------------
호스트와 배포할파일 배포할위치를 받아 pssh객체로 반환을 해주는 함수 입니다.

    sub deploy_task {
        my ($host, $sfile, $dfile) = @_;

        my @hosts = read_list($host); #서버리스트를 배열로 담습니다.

            # 호스트 배열을 돌면서 add method를 사용하여 객체 리스트를 만들어 줍니다.
            foreach my $srv ( @hosts ) {
                $pssh->add_host($srv);
                $pssh->push($srv, scp_put => {recursive => 1, glob => 1}, $sfile, $dfile);

            }

        # 객체 리스트가 만들어진 pssh를 리턴 합니다.
        return $pssh;
    }


실행 커맨드
----------------
핵심 모듈만 사용하여 구현한 코드를 실행 하면 아래와 같습니다.


    ./pssh -f ‘서버리스트파일’ -s ‘복사할파일’ -d ‘복사할 파일위치’


원격 커맨드
----------------
이제는 원격 서버에 커맨드를 날리는 부분을 살펴 보겠습니다.


    if ( defined $opt->srvlist && defined $opt->cmd ) {
        my $host = $opt->srvlist;
        my $cmd = $opt->cmd;
        my $mode = 'cmd_list';
        my @hosts = read_list($host);

        # 호스트명에서 뒤에 숫자로 정렬 호스트명이 숫자로 되어있을경우 소팅
        my @sorted_hosts = sort { ($a =~ /(\d+)/)[0] <=> ($b =~ /(\d+)/)[0] } @hosts;

        # 병렬모드 사용
        my $cmd_pssh;
        $cmd_pssh = cmd_task($host, $cmd);
        $cmd_pssh->run or die "RUN FAILED\n";

    }


원격 커맨드 함수
----------------
커맨드를 날리는 함수 입니다.

    sub cmd_task {

        my ($host, $cmd) = @_;
        my @hosts = read_list($host);

        # 호스트명에서 뒤에 숫자로 정렬
        my @sorted_hosts = sort { ($a =~ /(\d+)/)[0] <=> ($b =~ /(\d+)/)[0] } @hosts;
        $pssh->add_host($_) for ( @sorted_hosts );

        # 실행 커맨드 리스트를 가진 pssh객체를 만듭니다.
        $pssh->all(parsub => \&do_ssh_task);
        return $pssh;
    }


로그를 남기는 함수
--------------------

원격 커맨드의 결과를 ssh->capture를 사용해서 로그로 남기는  함수 입니다.

    sub do_ssh_task {
        my ($host, $ssh, $cmd) = @_;

        my $sshlog = '/tmp/sshlog.log';
        if ( $verbose ) {
            my ($rout, $pid) = $ssh->pipe_out($cmd) or die "pipe_in method failed: " . $ssh->error;
            while (<$rout>) {
                print;
            }

            close $rout;

        }
        elsif ( defined($opt->{savefile}) ) {
            print $fh $ssh->capture($cmd);

        }
        else {
            open my $fh, '>>', $sshlog;
            print $fh $ssh->capture($cmd);

        }

    }

    #실행 커맨드
    ./pssh -f ‘서버리스트파일’  -c “커맨드(ls -al)”



크리스마스 선물
-----------------

많은 서버에게 파일을 배포하게되면 로그가 이쁘지(?)않게 또는 정리가 안되어서 보여지게 되는되요.  배포후 로그를
Term::ProgressBar와 Text::ASCIITable모듈을 사용하여 정리된 로그를 남기는 함수를 추가합니다.



크리스마스 선물 - 테이블 그리기
-----------------

퍼센트와 배포할 파일이름을 인자로 받아 아래 함수를 사용해서 이쁘게 로그를 그릴수 있습니다 :-)
퍼센트 옵션은 전체서버리스트(100개)에서의 배포할 퍼센트를 의미 합니다.
(참고 : 2011년 달력의 키디님 기사에 자세한 설명이 되어 있습니다.  http://advent.perl.kr/2011/2011-12-01.html)

    # build result table
    sub de_table_task {
        my ($sfile, $info, $mode, $percent) = @_;

        my $num_cnt = 1;
        my $h_text = "Deploy Result ***[ $percent % ]***";

        my $table = Text::ASCIITable->new({
                    headingText => $h_text,
                });

        $table->setCols(qw/ Num SourceSrv Direction TargetSrv File Status /);
        my @before_sorted_hosts;

        foreach my $srv ( sort keys %{$info->{hosts}} ) {
            push ( @before_sorted_hosts, $info->{hosts}->{$srv}->{label} );
        }


        # 호스트명에서 뒤에 숫자로 정렬
        my @sorted_hosts = sort { ($a =~ /(\d+)/)[0] <=> ($b =~ /(\d+)/)[0] } @before_sorted_hosts;

        foreach my $srv ( @sorted_hosts ) {
            my $status = $info->{hosts}->{$srv}->{error} || $info->{hosts}->{$srv}->{state};

            $table->addRow(
                    $num_cnt,
                    $hostname,
                    "------->",
                    $info->{hosts}->{$srv}->{label},
                    $sfile,
                    $status,
                );

            $num_cnt++;
        }
        return $table;
    }



크리스마스 선물 - 프로그래스바 사용하기
-----------------

    sub progress {
        my $cnt = shift;

        my $progress = Term::ProgressBar->new ({count => $cnt ,name => 'Distributing',ETA=>'linear'});
        for (1..$cnt) {
            $progress->update($_);
            #$progress->message("\rDistributed $_ of $cnt");
        }
    }


결과
Start the [/tmp/testfile -> SERVER_LISTS] deployment!
Distributing: 100% [=================================================================]D 0h00m00s


크리스마스 선물 - 결과
-----------------
./pssh -f 서버리스트 -s 배포할파일-d 배포할경로 -p 10(전체 중에 퍼센트)
[로그테이블 결과][img-1]




정리하며
---------

해당코드가 전체 코드가 아니며 중간중간에 함수들이 빠져 있습니다. ( 펄 덕후님들을 위해 ㅎㅎㅎ)
핵심 코드는 다 들어가 있으며 함수들이 빠져 있는 부분들은 한번 구현 해보는것은 어떨까요 ?
병렬SSH기반을 사용한 이유는 기존에 레거시에서 사용하는 RCP의 방법의 한계 때문이 었습니다.
물론 병렬SSH의 한계도 존재 합니다만(scp의 한계…)
RCP의 한계는 포트가 꽉차게 되면 배포가 안되고 피드백을 받는게 힘들어서 였습니다…
또한 병렬SSH는 서버가 늘어날수록 비례해서 빨라지는 장점이 있습니다.
100대 이상을 관리하시는 개발자님들에게 도움이 되셨으면 좋겠습니다.


_EOT_


[img-1]:                        2016-12-10-1.png

[img-1-resize]:                 2016-12-10-1_r.jpg


[cpan-getopt-long-descriptive]: https://metacpan.org/pod/Getopt::Long::Descriptive
[cpan-net-openssh-parallel]:    https://metacpan.org/pod/Net::OpenSSH::Parallel
[cpan]:                         http://www.cpan.org/
[home-perlbrew]:                http://perlbrew.pl/
