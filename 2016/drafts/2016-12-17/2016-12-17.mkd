Title:    과거에 한 일로 미래를 예측하기
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   yongbin

저자
-----

[@yongbin][twitter-yongbin] - Seoul.pm, 맞춤법 전문가, 나운이 아빠 yongbin.yu _at_ gmail.com


시작하며
---------

지난 기사인 [열입곱 번째 날: PDL 시작하기][advent-2016-12-16]에서는 펄에서
수치연산을 위해서 사용할 수 있는 Perl Data Langauge 모듈과 PDL의 핵심적인 개념인
스레딩(Threading)에 대해서 알아봤습니다. 오늘은 조금 더 구체적으로 PDL을
이용해서 예측을 위한 확률을 계산하는 과정을 알아보도록 하겠습니다. 사실 예측은 요즘 유행하는
기계학습이나 통계분야의 핵심적인 주제이기 떄문에 개발자 입장에서 손쉽게
불러서 사용할 수 있는 함수가 많이 있습니다. 하지만 그런 함수들은 내부적으로
논문등을 통해서 소개된 수학적인 이론과 아이디어를 구현한 내용이기때문에 원한다면
얼마든지 그 내부를 뜯어보고 원하는 환경으로 옮길수 있습니다. 이번 기사는 깃헙에서
제공하는 과거 1년간의 커밋 활동자료를 바탕으로 요일별 상태변화를 추출하고
베이지안 갱신을 통해 1년간의 활동을 요약한 전치행렬을 만든 뒤 마코브 방식으로
다음주에 내가 얼만큼 커밋을 할지를 확률적으로 예측하는 과정을 PDL을 통해 계산하는 방법을
단계별로 설명하고자 합니다. 흥미롭지 않나요?

준비물
-------

필요한 모듈은 다음과 같습니다.

- [CPAN의 PDL모듈][cpan-pdl]
- [CPAN의 PDL::Stats모듈][cpan-pdl-stats]
- [CPAN의 Mojolicious모듈][cpan-mojolicious]

직접 [CPAN][cpan]을 이용해서 설치한다면 다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ sudo cpan PDL PDL::Stats Mojolicious

사용자 계정으로 모듈을 설치하는 방법을 정확하게 알고 있거나
[perlbrew][home-perlbrew]를 이용해서 자신만의 Perl을 사용하고 있다면
다음 명령을 이용해서 모듈을 설치합니다.

    #!bash
    $ cpan PDL PDL::Stats Mojolicious

추가적으로 전체적인 진행과정의 이해를 돕기위해 전체 과정을 PDL의 상호작용 쉘
환경인 [pdl2][cpan-pdl2]에서 진행합니다. 쾌적한 쉘환경을 구축하기위해서는
다음과 같은 추가 모듈의 설치가 필요합니다.

- [CPAN의 Devel::REPL::Plugin::ReadLineHistory모듈][cpan-devel-repl-plugin]
- [CPAN의 Term::ReadLine::Gnu모듈][cpan-term-readline-gnu]

모든 모듈이 설치가 완료되었다면, 터미널이나 명령행 입력기를 통해 다음과 같이
`pdl2` 쉘을 실행시킬 수 있습니다.

    #!bash
    $ pdl2

한가지 팁을 드리면, 일반적으로 REPL 환경에서는 마지막 실행시킨 구문의 결과가
바로 출력되면 좀 더 편하게 진행상황을 파악할 수 있습니다. 하지만 pdl2 쉘은
기본적으로는 마지막 평가된 구문의 결과를 출력하지 않습니다.
이 동작을 변경하기 위해서는 쉘 상에서 `do_print(1)` 명령을 입력하시거나,
매번 입력하기 귀찮다면 `~/.perldlrc` 파일에 다음과 같은 문을 추가하면 됩니다.

    #!perl
    $_REPL->print_by_default(1);

자 이제 모든 준비가 끝났습니다. 시작해 볼까요?

지난 1년간 내가 커밋한 기록 가지고 오기
---------------------------------------

깃헙은 `https://github.com/users/<사용자id>/contributions`와 같은 형식으로
사용자의 최근 1년간 공개저장소에 커밋한 결과를 보여주는 페이지를 제공합니다.
예를들어 rjbs의 최근 1년 활동은 다음 링크에서 확인가능합니다.

    #!plain
    https://github.com/users/rjbs/contributions

HTML소스코드를 잠시 열어보면 다음과 같이 구성되어있습니다.

    #!xml
    <svg width="676" height="104" class="js-calendar-graph-svg">
    <g transform="translate(16, 20)">
        <g transform="translate(0, 0)">
            <rect class="day" width="10" height="10" x="13" y="0" fill="#d6e685"
    data-count="1" data-date="2016-01-10"/>
            <rect class="day" width="10" height="10" x="13" y="12"
    fill="#8cc665" data-count="8" data-date="2016-01-11"/>
    ...
        </g>
    ...

즉 SVG 테그로 표현한 그림에서 각각의 사각형 그림을 표현하는 `rect` 테그의 속성중
`data-count`에 커밋수를, `data-date`에 해당 날짜를 저장하고 있습니다. 간단하게
`Mojolicous`의 DOM 명령을 이 페이지에서 두 속성값을 추출해 보도록 합시다.
(지금부터 나오는 코드는 모두 실행시킨 pdl2 쉘에 붙여넣으면서 따라오면 됩니다.)

    #!perl
    use Mojo::UserAgent;
    use Time::Local;

    my $mojo   = Mojo::UserAgent->new;
    my @response;
    my $url = 'https://github.com/users/rjbs/contributions'

    sub wday {
        my ( $mday, $mon, $year ) = reverse( split( /-/, shift ) );
        return (localtime( timelocal( 0, 0, 0, $mday, $mon - 1, $year ) ))[6];
    }

    $mojo->get( $url )->res->dom->find('rect')->each(
        sub {
            my ( $date, $cnt ) = @{$_}{qw/data-date data-count/};
            my $wd = wday($date);

            push @{ $response[$wd] }, $cnt;
        }
    );

위 코드에서는 `data-date`에 포함된 날짜의 요일에 해당하는 색인(0~6)을 얻기위해서
`wday` 함수를 정의하고, `$url`의 결과중 `react` 테그의 날짜와 커밋수를 `@response`
배열에 각각의 요일별로 저장합니다.

    #!perl
    my $commits = pdl(@response)
    $commits->dims
    #$VAR1 = 53;
    #$VAR2 = 7;

`pdl` 함수는 펄 기본 자료형을 `pdl`의 피들(piddle) 자료형으로 변환해주는 함수입니다.
`dims` 함수는 자료의 차원을 돌려줍니다. 지금은 1년간의 커밋수를 요일별로
저장했기 때문에 53 x 7 모양의 행렬이 만들어지면 성공입니다.

수치자료를 범주형으로 변경하기
------------------------------

자료를 조금 단순화 시켜보겠습니다. 현재 `$commits`에 저장된 요일별 커밋수 자료는
수치형 자료입니다. 하지만 우리가 미래 상태에 대한 확률을 이야기하기 위해서는 발생할
수 있는 사건의 경우의 수를 조금 줄일 필요가 있습니다. 따라서 전체 커밋 수를 5개의
구간으로 나누고 5개의 구간으로 나누고 전혀 커밋하지 않음(0) 부터 25%씩 분류해서
범주형 자료로 변경해 보겠습니다.

    #!perl
    my $ratio = $commits / $commits->max;
    {
            my $rank = (  0 == $ratio ) * 0
                    + ( ( 0    < $ratio ) & ( $ratio <= 0.25 ) ) * 1
                    + ( ( 0.25 < $ratio ) & ( $ratio <= 0.5  ) ) * 2
                    + ( ( 0.5  < $ratio ) & ( $ratio <= 0.75 ) ) * 3
                    + ( ( 0.75 < $ratio ) & ( $ratio <= 1    ) ) * 4
    }

이제 `$ratio` 변수는 `$commits` 에 저장된 커밋수를 최대 커밋수로 나눈 비율을
저장합니다. `$rank`는 `$ratio` 값을 기준으로 0부터 4까지의 값을 25% 구간별로
나눠서 저장해서 변환된 결과는 다음과 같습니다.

    #!plain
    [
      [0 1 0 0 1 0 0 2 1 1 1 1 1 2 1 0 4 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 1 1 0 0 0 0 1 1 1 0 2 0 1 0]
      [1 2 1 2 1 1 0 1 2 0 1 1 0 0 3 1 0 1 3 2 2 1 2 1 0 0 2 2 1 1 2 1 0 1 2 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 0]
      [1 1 0 3 1 1 2 0 0 1 1 1 0 1 1 1 2 2 2 1 2 2 1 0 0 1 1 0 2 0 0 1 1 1 0 1 1 1 1 3 0 1 0 1 0 1 1 0 1 1 1 2 0 0]
      [1 0 1 1 1 1 0 1 0 1 2 0 1 1 1 0 1 1 1 0 0 1 1 0 0 1 0 1 0 1 2 1 0 1 0 1 1 1 1 2 0 2 1 1 1 1 0 2 1 1 0 1 0 0]
      [1 1 1 2 1 2 1 1 0 1 1 1 0 1 1 2 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 0 1 0 0 2 1 1 1 1 1 1 2 0 1 2 0 1 1 2 0 1 1 0]
      [2 1 1 1 2 1 0 1 0 0 1 0 0 1 0 4 1 1 2 2 0 2 1 1 0 0 1 0 0 0 1 1 1 1 1 2 0 0 1 2 1 0 1 2 0 2 0 0 0 1 1 0 1 0]
      [0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 4 2 1 1 1 1 0 0 0 0 0 0 1 1 2 1 0 0 0 0 0 0 0 1 1 1 1 1 1 2 1 0 0 0 1 0 0 1 0]
    ]

상태의 변화 추적하기
--------------------

이제 우리는 1년간 요일별로 어느정도 수준으로 작업했는지를 0에서 4까지 5가지의 상태로
요약했습니다. 궁극적으로 우리는 *과거에 상태가 변한 양상*으로 부터 미래의 상태변화
가능성을 계산해야하기 때문에 매일의 상태가 아니라 *상태의 변화*를 얻어야 합니다.

    #!perl
    my $tmat = zeros( 5, 5, 7 );

5개의 상태변화는 시작상태를 열 색인(column index)로 하고, 종료상태를 행 색인(row
index)로 하는 5 x 5 행렬로 표현할 수 있습니다. 예를 들면 내가 지난주 월요일
전혀 작업을 하지 않았다(상태 0)가 금주에 최대치 대비 25%에서 50% 수준의 작업을 했다면(상태 2)
저의 *상태변화*는 (0, 2) 좌표의 값에 1을 증가시키는것으로 다음과 같이 표현할 수 있습니다.

    #!plain
    [
      [0 0 0 0 0]
      [0 0 1 0 0]
      [0 0 0 0 0]
      [0 0 0 0 0]
      [0 0 0 0 0]
    ]

우리는 각 요일별로 상태변화를 기록하기 떄문에 이런 행렬이 총 7개가 필요하므로
5 x 5 x 7 행렬이 필요합니다. `zeros`는 PDL에서 임의의 차수의 0으로 체워진 행렬을
만들때 사용하는 함수입니다.

기존 `$rank` 행렬의 첫번째  행의 값이  `[0 1 0 0 1 0 0 2 1 1]` 이라면 이는
상태가 일요일에 상태가 `0 -> 1 -> 0 -> 0 -> 1 -> 0 -> 0 -> 2 -> 1 -> 1` 으로
변했다는것을 의미하고 이를 상태변화로 표현하기 위해서는 다음과 같이 `시간상태,
종료상태` 형태로 표현해야 합니다.

    #!plain
    [
      [ 0 1 ]
      [ 1 0 ]
      [ 0 0 ]
      [ 0 1 ]
      [ 1 0 ]
      [ 0 0 ]
      [ 0 2 ]
      [ 2 1 ]
      [ 1 1 ]
    ]

기존 `$rank` 행렬에서 값에서 위와 같이 값을 가지고 오기 위해서는 우리는
(0,1), (1,2), (2,3) .. (52,53) 과 색인을 표현해야합니다. 이를 PDL의 `sequence`
함수를 사용해서 표현하면 아래와 같습니다.

    #!perl
    my $n = $rank->getdim(0) - 1;
    my $seq = pdl([ sequence($n), sequence($n) + 1 ])
    my $idx = $seq->transpose->dummy(1)->transpose;

즉 곰곰이 생각해보면 이런 색인은 컬럼의 수가 `$n` 이라고 할때 0 .. $n - 1 배열과 1
.. $n 배열을 조합하면 얻을 수 있습니다.

    #!perl
    my $s = $rank->dummy(1)->range($idx)->squeeze;
    $s = $s->append($s->slice(0)->zvals);

이렇게 얻은 색인을 `range` 함수에 전달해 값을 가지고 온 뒤, 각 요일을 색인을 표현하고 있는
`zvals` 값을 조합하면 아래와 같이 (시작상태, 종료상태, 요일)로 표현된 완전한 상태 변환표를
얻을 수 있습니다.

    #!plain
    [
      [
        [0 1 0]
        [1 0 0]
        [0 0 0]
        ...

이제 이렇게 표현된 좌표에 해당하는 [전치행렬][wiki-tranmat] `$tmat`의 해당 색인에 값을
반영해주기만 하면 됩니다.

    #!perl
    for my $i ( @{ $s->unpdl } ) {
        $tmat->range([@{$_}])++ for (@{$i})
    }

결과 `$tmat`은 다음과 같은 형태가 됩니다.

    #!plain
    [
      [
        [17 10  1  0  1]
        [ 9  9  2  0  0]
        [ 2  1  0  0  0]
        [ 0  0  0  0  0]
        [ 1  0  0  0  0]
      ]
      [
        [ 5  7  2  0  0]
        [ 6 14  6  1  0]
        [ 1  6  2  1  0]
        [ 1  1  0  0  0]
        [ 0  0  0  0  0]
      ]
      ...

결과가 잘 계산되었는지 확인해보기 위해서는 전체 상태변화의 합을 확인해 보면
됩니다. PDL은 각각의 피들을 합으로 요약하기 위해서 `sumover` 함수를
제공합니다.

    #!perl
    $tmat->sumover->sumover->sumover
    #364

우리가 가진 자료는 요일별 53주간의 상태에 대한 정보이고 여기서 얻을수 있는
상태 변화는 52개 입니다. 따라서 `$tmat`에 기록된 총 상태변화는 52 x 7 로
364개가 되어야 맞습니다. 결과가 맞게 나온다면 잘 따라오고 있다는 증거입니다.
조금만 더 힘을 내 보도록 하겠습니다.


베이지안 갱신
-------------

우리는 지금까지 지난 1년간 요일별로 53주간 내가 커밋한 횟수를 최대 커밋수를
기준으로 5개의 상태로 나눈뒤 각 요일별로 내 상태가 어떻게 변해왔는지를 `$tmat`
변수에 요약했습니다. 요약된 자료는 우리가 *과거에* 어떻게 행동했는지에 대한
정보를 담고 있습니다. 이제 우리는 수집된 정보를 *미래에* 어떻게 될지 가능성에
대해 이야기하기 위해서 확률의 형태로 과거의 정보를 요약해야합니다.

베이지안 업데이팅은 내가 가진 사전 정보와 새롭게 발견된 관측들을 조합해서 새로운
견해를 형성하는 과정을 의미합니다. 예를들면 베이지안 업데이팅을 이용하면 내가
첫번째 월요일에 최대 커밋을 기록하고 다음주 월요일에 최대커밋을 기록한 4 4 라는
관측이 있을때 그 다음주에 내가 얼마나 기여를 할 지를 확률적으로 계산할 수 있습니다.
또 그 다음주 내가 아무런 커밋도 하지 않은 0의 상태를 기록해서 4 0 이라는 관측이
추가되었을때 지난주의 기록과 조합해서 수정된 확률역시 계산할 수 있습니다. 우리는
이런 베이지안 갱신을 이용해서 각 요일별로 총 52번의 상태변화(관측)을 요일별 예측 확률에
갱신해 나갑니다.

    #!perl
    use PDL::Stats;
    for my $wd ( 0 .. 6 ) {
        my $k = $tmat->slice(":,:,$wd")->squeeze;
        my $sumover = $k->copy->sumover;

        for my $r ( 0 .. 4 ) {
            for my $c ( 0 .. 4 ) {
                my $sum = $sumover->at($r);
                my $val = $k->at($c,$r);

                my $x = zeroes(100)->xlinvals( 0, 1 );
                my $prob = $x->index( maximum_ind( pdf_beta($x, $val + 1, $sum - $val + 1 )) );

                $k->range([$c,$r]) .= $prob;
            }
        }
    }

위 코드는 `$tmat`의 관측값을 베이지안 갱신을 적용한 확률로 계산하는 과정을
담고 있습니다. 베이지안 갱신은 수치적으로는 [우도함수][wiki-likefunc]와 [사전분포][wiki-prior]의 결합확률
분포를 구한 뒤, 그 결과를 0과 1사이의 값으로 표현하는 확률에 형태로 만들기
위해서 [한정상수][wiki-normalconst]로 나누는 과정입니다. 경우에 따라서는 한정상수를 적용하는 과정에
복잡하거나 불가능한 경우있기때문에  가능하면 우도함수가 [지수 분포족][wiki-expfam]인 경우
함수의 특성을 활용해서 한정상수를 계산하지 않고 손쉽게 사후분포를 구할 수 있는
[켤래 사전 분포(conjugate prior)][wiki-conjugate]를 활용합니다.

현재 우리의 관측값은 성공/실패 형태로 나타낼 수 있는 [이항(binomial)][wiki-binomial]
형태의 값이기 때문에 [베타분포][wiki-betadist]를 이용해서 손쉽게 사후분포를 계산할 수 있습니다.
또한 이항 관측자료와 베타분포는 위에서 언급한 켤래 사전분포 관계이기 때문에
많은 수의 관측을 단순하게 베타분포의 모수에 요약해서 적용할 수 있습니다.
위 코드에서 `$prob` 변수를 구하는 부분이 합의 형태로 이미 요약되어있는
관측 값에 무정보 사전분포(1,1)을 적용한 뒤, [PDL::Stats][cpan-pdl-stats]에서
제공하는 베타분포 PDF함수 `pdf_beta`에 전달하고 `maximum_ind`와 `index` 함수를 통해
사후분포의 최빈값에 해당하는 x값을 구하는 베이지안 갱신의 핵심적인 동작을
담고 있습니다.

    #!plain
    [
      [
        [0.58585859 0.34343434 0.03030303          0 0.03030303]
        [0.45454545 0.45454545  0.1010101          0          0]
        [0.66666667 0.33333333          0          0          0]
        [         0          0          0          0          0]
        [         1          0          0          0          0]
      ]
      [
        [0.35353535 0.50505051 0.14141414          0          0]
        [0.22222222 0.51515152 0.22222222 0.04040404          0]
        [ 0.1010101  0.5959596  0.2020202  0.1010101          0]
        [0.50505051 0.50505051          0          0          0]
        [         0          0          0          0          0]
      ]
      ...

결과적으로 `$tmat`은 각각의 상태변화의 가능성을 확률로 표현한 완전한 형태의
전치행렬이 되었습니다. 위 결과의 월요일(두번째 행렬) 전치행렬을 좀 더 알기쉽게
DAG 형태의 표로 정리하면 다음과 같습니다.


![월요일의 상태변화 전치행렬 DAG][img-1]
*그림 1.* 월요일의 상태변화 전치행렬 DAG

해석하면, 지난 1년간의 기록을 볼때 내가 월요일에 아무 작업도 하지 않고 놀다가 (상태 s0)
에서 다음주에도 아무것도 하지 않고 놀(상태 s0) 확률은 35%이고 지난주는 놀았지만 최대치 대비
25% 미만으로 살짝 일을 할 확률은 50% 정도 되며 전력을 다해 일할(s4) 가능성은 아쉽지만 0% 임을
표현하고 있습니다.

마코브 연쇄
---------

이제 거의 다 왔습니다. 우리는 지난 52주간의 상태변화의 관측을 반영해서
확률형태로 각각의 표현한 전치행렬 `$tmat`을 구했습니다. [마코브 연쇄(markov chain)][wiki-mc]란
나의 다음 상태는 오직 직전의 상태에만 영향을 받는다는 [마코브 모형(markov model)][wiki-mm]을
기반으로 연속적인 상태의 변화를 전치행렬의 중첩으로 계산하는 방식을 말합니다.
마코브 모형에 따르면 우리가 계산하고자 하는 *다음주*에 내가 얼만큼 작업을 할지를 결정하는
요인은 금주(관측된 마지막주)의 나의 상태와, 나의 상태변화의 관측을 요약한 전치행렬의 곱으로
간단하게 구할 수 있습니다. 그 내용을 PDL로 표현하면 다음과 같습니다.

    #!perl
    my $lw = zeros(5,7);
    my $lw_idx = $rank(-2)->append($rank(-2)->yvals);
    $lw->range($lw_idx)++;
    ( ( $lw->dummy(1) x $tmat )->squeeze );

53주 전체 상태 정보가 저장되어있는 `$rank` 행렬에서 가장 마지막값을 추출해서 `$lw_idx`을 얻은 뒤,
최종적으로 우리가 계산하고자하는 마지막 상태 `$lw` 행렬에 반영합니다.

    #!plain
    [
      [0 1 0 0 0]
      [1 0 0 0 0]
      [1 0 0 0 0]
      [1 0 0 0 0]
      [0 1 0 0 0]
      [0 1 0 0 0]
      [0 1 0 0 0]
    ]

즉 rjbs의 가장 마지막주 일주일의 월,화,수는 커밋을 하지 않 았고, 나머지 날은 약 7.5회 미만의 커밋을
해서 1상태였음을 알 수 있습니다. 그리고 마지막으로 이 `$lw` 행렬과 전치행렬인 `$tmat` 행렬을 행별로
스레딩해서 곱한 뒤 결과를 요약하면 드디어 다음과 같은 최종 결과를 얻을 수 있습니다.

    #!plain
    [
      [ 0.45454545  0.45454545   0.1010101           0           0]
      [ 0.35353535  0.50505051  0.14141414           0           0]
      [ 0.25252525  0.50505051  0.19191919 0.060606061           0]
      [ 0.17171717  0.71717172  0.11111111           0           0]
      [ 0.23232323  0.64646465  0.12121212           0           0]
      [ 0.39393939  0.39393939  0.17171717           0  0.04040404]
      [ 0.23232323  0.65656566  0.11111111           0           0]
    ]

짜잔! 드디어 우리가 원하는 값을 얻었습니다. 결과값은 코드를 실행시킨 시점에 따라
조금씩 달라질 수 있습니다. 다음주 예측을 요약하면 다음과 같습니다.

- 일요일은 작업을 안할 확률 45%, 7.5회 미만 커밋할 확률 45%, 15회 미만 커밋할
  확률 10%
- 월요일은 작업을 안할 확률 35%, 7.5회 미만 커밋할 확률 50%, 15회 미만 커밋할
  확률 14%
- 화요일은 작업을 안할 확률 25%, 7.5회 미만 커밋할 확률 50%, 15회 미만 커밋할
  확률 19%, 22.5회 미만 커밋할 확률 6%
- 수요일은 작업을 안할 확률 17%, 7.5회 미만 커밋할 확률 71%, 15회 미만 커밋할
  확률 11%
- 목요일은 작업을 안할 확률 23%, 7.5회 미만 커밋할 확률 64%, 15회 미만 커밋할
  확률 12%
- 금요일은 작업을 안할 확률 39%, 7.5회 미만 커밋할 확률 39%, 15회 미만 커밋할
  확률 17%, 최대 커밋을 할 확률 4%
- 금요일은 작업을 안할 확률 23%, 7.5회 미만 커밋할 확률 65%, 15회 미만 커밋할
  확률 11%

지금까지 PDL을 이용해서 비교적 복잡한 수치연산을 진행하는 한단계씩 차근차근
살펴봤습니다. 전체 코드는 [다음주소][pdl-predict] 에서 확인할 수 있습니다

정리하며
-------

PDL을 이용한 수치연산 어떠셨나요? 이제 비밀을 말씀드리면, 사실 이 코드는 이미 이탈리아의 펄
몽거 [Ettore Di Giacinto(MUDLER)][ettore]가 2014년에
공개한 [GitInsight][gitinsight] ( [blog post][gitinsight-blog] / [repo][gitinsight-github]) 모듈의 코드를 분석한
뒤 좀 더 PDLish 한 문법으로 개선한 내용과 제 나름의 설명을 붙여 정리한 결과입니다. 썰렁한
결과에 실망하셨다면 원 저자가 [정성들여 만들어둔 웹인터페이스][gitinsight-ws]의 화면으로 마음의
위안을 받으시길 바랍니다.

돌이켜 보면 올 한해는 펄 보다는 통계와 기계학습과 같은 데이터 분석과 관련된 다양한 분야에 푹 빠져서
지낸 한해였습니다. 잠시 외도를 하던 동안에도 공부하는 내용들을 펄에서
구현할수 있는 방법이 없을까 자주 고민하곤 했었는데, 우연히도 평소 관심있던
베이지안 방법을 사용하고 전체 연산코드를 PDL로 작성한 GitInsight 프로젝트를 발견했습니다.
기사를 쓰기위해 저자가 작성한 코드를 REPL 환경에서 한줄한줄 뜯어서 실행해보고, 나름 공부한 내용으로
조금씩 개선시킨 과정에서 PDL의 핵심 개념인 스레딩이나 PDL의 REPL 환경, 그리고 이론적으로는
베이지안과 마코브 체인에 대해서 좀 더 깊게 이해할 수 있는 뜯깊은 시간이었습니다. 이 기사를 읽은
여러분들에게도 조금이나마 도움이 되었기를 바랍니다. 올 한해도 감사했습니다!

_EOT_

[img-1]:                        2016-12-17-1.png

[advent-2016-12-17]:            http://advent.perl.kr/2016/2016-12-27.html
[cpan-devel-repl-plugin]:       https://metacpan.org/pod/Devel::REPL::Plugin::ReadLineHistory
[cpan-mojolicious]:             https://metacpan.org/pod/Mojolicious
[cpan-pdl-stats]:               https://metacpan.org/pod/PDL::Stats
[cpan-pdl2]:                    https://metacpan.org/pod/distribution/PDL/Perldl2/pdl2
[cpan-pdl]:                     https://metacpan.org/pod/PDL
[cpan-term-readline-gnu]:       https://metacpan.org/pod/Term::ReadLine::Gnu
[cpan]:                         http://www.cpan.org
[ettore]:                       https://metacpan.org/author/MUDLER
[gitinsight-blog]:              http://blogs.perl.org/users/mudler/2014/08/having-fun-with-perl-and-pdl-gitinsight.html
[gitinsight-github]:            https://github.com/mudler/GitInsight
[gitinsight-ws]:                http://gitinsight.mudler.pm
[gitinsight]:                   https://metacpan.org/pod/GitInsight
[home-perlbrew]:                http://perlbrew.pl
[pdl-predict]:                  https://gist.github.com/yongbin/9e297cb26f1ef97d2814fd5dedab9dee
[twitter-yongbin]:              http://twitter.com/#!/y0ngbin
[wiki-betadist]:                https://en.wikipedia.org/wiki/Beta_distribution
[wiki-binomial]:                https://en.wikipedia.org/wiki/Binomial_distribution
[wiki-binomial]:                https://en.wikipedia.org/wiki/Binomial_distribution
[wiki-conjugate]:               https://en.wikipedia.org/wiki/Beta_distribution
[wiki-likefunc]:                https://en.wikipedia.org/wiki/Likelihood_function
[wiki-normalconst]:             https://en.wikipedia.org/wiki/Normalizing_constant
[wiki-prior]:                   https://en.wikipedia.org/wiki/Prior_probability
[wiki-tranmat]:                 https://en.wikipedia.org/wiki/Stochastic_matrix
